var CommentBox = React.createClass({
	getInitialState : function() {
		return { pending : [], completed : [] }
	},
	loadPendingTasksFromServer : function() {
		$.ajax({
	     	url: this.props.pendingTaskUrl,
	      	dataType: 'json',
	      	cache: false,
	      	success: function(data) {
	        	this.setState({pending: data});
	      	}.bind(this),
	      	error: function(xhr, status, err) {
	        	console.error(this.props.pendingTaskUrl, status, err.toString());
	      	}.bind(this)
	    });
	},
	loadCompletedTasksFromServer : function() {
		$.ajax({
	     	url: this.props.completedTaskUrl,
	      	dataType: 'json',
	      	cache: false,
	      	success: function(data) {
	        	this.setState({completed: data});
	      	}.bind(this),
	      	error: function(xhr, status, err) {
	        	console.error(this.props.pendingTaskUrl, status, err.toString());
	      	}.bind(this)
	    });
	},
	onTaskFormSubmit : function(task) {
		var tasks = this.state.pending;
	    // Optimistically set an id on the new comment. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
	    task.id = Date.now();
	    var newTasks = tasks.concat([task]);
	    this.setState({pending: newTasks});

	    var that = this;
	    $.ajax({
	     	url: this.props.onFormSubmitUrl,
	     	type: 'POST',
	      	dataType: 'json',
	      	cache: false,
	      	data : { _token: $('[name="csrf_token"]').attr('content'), title : task.title},
	      	success: function(data) {
	        	that.setState({ pending: data });
	      	}.bind(this),
	      	error: function(xhr, status, err) {
	        	console.error(this.props.onFormSubmitUrl, status, err.toString());
	      	}.bind(this)
	    });
	},
	componentDidMount : function() {
		this.loadPendingTasksFromServer();
		this.loadCompletedTasksFromServer();
		$('body').find('[data-toggle="tooltip"]').tooltip();
	},
	updateTask : function(task) {
		var that = this;
		$.ajax({
	     	url: this.props.onFormSubmitUrl + '/' + task.id,
	     	type: 'PUT',
	      	dataType: 'json',
	      	cache: false,
	      	data : { _token: $('[name="csrf_token"]').attr('content'), id : task.id, status : task.status},
	      	success: function(data) {
	      		if (data.status) {
		        	that.loadPendingTasksFromServer();
		        	that.loadCompletedTasksFromServer();
	      		}
	      	}.bind(this),
	      	error: function(xhr, status, err) {
	        	console.error(this.props.onFormSubmitUrl, status, err.toString());
	      	}.bind(this)
	    });
	},
  	render: function() {
	    return (
			<div className="row">
				<div className="col-sm-6">
					<h3>Pending Tasks</h3>
					<PendingTasks data={this.state.pending} updateTask={this.updateTask} onTaskFormSubmit={this.onTaskFormSubmit} />
					
				</div>
				<div className="col-sm-6">
					<h3>Completed Tasks</h3>
					<ul className="list-group">
						<CompletedTasks updateTask={this.updateTask} data={this.state.completed}/>
					</ul>
				</div>
			</div>
	    );
  	}
});

var PendingTasks = React.createClass({
	getInitialState : function() {
		return { data : [] }
	},
	addToCompletedTask : function(id, status) {
		this.props.updateTask({ id : id, status : status });
		return false;
	},
	addToDeletedTask : function(id, status) {
		this.props.updateTask({ id : id, status : status });
		return false;
	},
	onTaskFormSubmit : function(task) {
		this.props.onTaskFormSubmit({ title : task.title });
	},
	componentDidMount : function() {
		$('body').find('[data-toggle="tooltip"]').tooltip();
	},
	render : function() {
		var that = this;
		var tasks = this.props.data.map(function(task) {
			return ( 
				<div className="list-group-item" key={task.id}>
					{task.title}
					<a data-id={task.id} data-status="2" onClick={that.addToDeletedTask.bind(null, task.id, 2)} className="icons pull-right" data-toggle="tooltip" data-placement="top" title="Delete this task">
						<i className="ion-ios-close-outline"></i>
					</a>
					<a data-id={task.id} data-status="1" onClick={that.addToCompletedTask.bind(null, task.id, 1)} className="icons pull-right" data-toggle="tooltip" data-placement="top" title="Add to completed">
						<i className="ion-ios-checkmark-outline"></i>
					</a>
				</div>
			);
		});	
		
		return (
			<div className="list-group">
				{tasks}
				<TaskForm onFormSubmit={this.onTaskFormSubmit}/>
			</div>
		);
	}
});

var TaskForm = React.createClass({
	getInitialState : function() {
		return { title : '' }
	},
	handleSubmit : function(e) {
		e.preventDefault();

		var title = this.state.title.trim();

		if (!title) {
			return;
		}
		
		this.props.onFormSubmit({ title : title });
		this.setState({ title : '' });
	},
	handleTextChange : function(e) {
		this.setState({ title : e.target.value })
	},
	render : function() {
		return (
			<div className="list-group-item">
				<form onSubmit={this.handleSubmit}>
					<input 
					type="text" 
					className="form-control" 
					placeholder="Enter your task here"
					value={this.state.title}
					onChange={this.handleTextChange}/>
				</form>
			</div>
		);
	}
});

var CompletedTasks = React.createClass({
	getInitialState : function() {
		return { data : [] }
	},
	addToPendingTask : function(id, status) {
		this.props.updateTask({ id : id, status : status });
		return false;
	},
	addToDeletedTask : function(id, status) {
		this.props.updateTask({ id : id, status : status });
		return false;
	},
	componentDidMount : function() {
		$('body').find('[data-toggle="tooltip"]').tooltip();
	},
	render : function() {
		var that = this;
		var tasks = this.props.data.map(function(task) {
			return ( 
				<div className="list-group-item" key={task.id}>
					{task.title}
					<a data-id={task.id} className="icons pull-right" onClick={that.addToDeletedTask.bind(null, task.id, 2)} data-toggle="tooltip" data-placement="top" title="Delete this task">
						<i className="ion-ios-close-outline"></i>
					</a>
					<a data-id={task.id} className="icons pull-right" onClick={that.addToPendingTask.bind(null, task.id, 0)} data-toggle="tooltip" data-placement="top" title="Add to Pending list">
						<i className="ion-ios-arrow-thin-left"></i>
					</a>
				</div>
			);
		});	
		
		tasks = (this.props.data.length) ? tasks : <div className="alert alert-info">No completed task</div>;

		return (
			<div>
				{tasks}
			</div>
		);
	}
});

ReactDOM.render(
  <CommentBox pendingTaskUrl="tasks/pending" completedTaskUrl="tasks/completed" onFormSubmitUrl="tasks" />,
  document.getElementById('content')
);
